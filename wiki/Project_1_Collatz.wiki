#summary CS 373 Project 1: Collatz

= Algorithm Design =

The algorithm follows the basics of the 3n+1 problem found here: 
http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=3&page=show_problem&problem=36

We were encouraged to start with a simple implementation of algorithm, much like the one in the problem description. Once we were sure the simple solution was correct, a faster solution was implemented using a cache.  I also added two more optimizations that we learned from class.


= Optimizations =

== Lazy Cache ==
* The lazy cache is populated with the cycle length of the evaluated number at the very end of computation.
* On every iteration, the cache is checked before computing 3n+1 or divide by 2
* If the number being evaluated has a cycle length already stored in cache, that means we've already computed the cycle length for that number before.  So, instead of re-computing, add that cycle length to the current cycle length, and skip the computation.

== Optimization 1: Skip a step ==
* Only applies if the number being evaluated, n, is odd
* (3n + 1) with n odd will always produce an even
* So, instead of just computing 3n+1, we can skip a step by computing (3n+1)/2 

Proof from Quiz 2:
(3n + 1) / 2
3n/2 + 1/2
n + n/2 + 1/2
n + n/2 + 1, because n is odd
n + (n >> 1) + 1

== Optimization 2: Compute only the upper half ==
* 

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages